{"version":3,"sources":["App.tsx","components/Cinemagraph.tsx","serviceWorker.ts","index.tsx"],"names":["PlayState","Cinemagraph","videoRef","React","audioRef","bgAudioRef","lastPauseTime","Date","_this2","this","current","console","log","addEventListener","props","onComplete","newProps","file","paused","getTime","load","play","pause","audioData","srcNode","actx","window","AudioContext","webkitAudioContext","src","concat","fetch","mode","then","resp","arrayBuffer","buffer","decodeAudioData","playLoop","abuffer","createBufferSource","connect","destination","loop","start","react","className","autoPlay","muted","playsInline","ref","type","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","playerRef","createRef","timeoutId","videos","name","keypresses","playCoord","x","y","nextCoord","onKeyDown","e","state","playState","Complete","next","NotStarted","playIfNotPlaying","setState","Playing","onTouchStart","clickedTouchPoint","stopAudio","index","keypressIndex","keyTimeout","resizeViewport","vh","innerHeight","document","documentElement","style","setProperty","video","react_default","a","createElement","id","onClick","left","top","Cinemagraph_Cinemagraph","length","setTimeout","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.69d2dce2.chunk.js","sourcesContent":["import React, { Component, SyntheticEvent } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Cinemagraph from './components/Cinemagraph';\nimport KeyIndicator from './components/KeyIndicator';\nimport { isAbsolute } from 'path';\n\nenum PlayState {\n  NotStarted = 0,\n  Playing = 1,\n  Complete = 2\n}\n\ninterface State {\n  index: number\n  keypressIndex: number\n  keyTimeout: number\n  playState: PlayState\n}\n\ninterface Video {\n  name: string\n  keypresses?: string[]\n  playCoord?: { x: number, y: number }\n  nextCoord?: { x: number, y: number }\n}\n\nclass App extends Component<{}, State> {\n  private playerRef = React.createRef<Cinemagraph>()\n  private timeoutId: number | undefined\n\n  videos: Video[] = [\n    {\n      name: \"bed\",\n      keypresses: [\"ArrowUp\"],\n      playCoord: { x: 20, y: 60 },\n      nextCoord: { x: 70, y: 60 }\n    },\n    {\n      name: \"shower\",\n      keypresses: [\"ArrowDown\"],\n      playCoord: { x: 40, y: 70 },\n      nextCoord: { x: 70, y: 50 }\n\n    },\n    {\n      name: \"street\",\n    },\n    {\n      name: \"parks\",\n    },\n    {\n      name: \"drugdealers\",\n    },\n    {\n      name: \"turkey\",\n    },\n    {\n      name: \"keepwalking\",\n    },\n    {\n      name: \"dolores\",\n    },\n    {\n      name: \"urethra\",\n    },\n    {\n      name: \"google\",\n    },\n    {\n      name: \"fork\",\n    },\n    {\n      name: \"slide\",\n    },\n    {\n      name: \"up\",\n    },\n    {\n      name: \"stumble\",\n    },\n    {\n      name: \"run\",\n    },\n    {\n      name: \"canal\",\n    },\n    {\n      name: \"across\",\n    },\n    {\n      name: \"slidetop\",\n    },\n  ]\n\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      index: 0,\n      keypressIndex: 0,\n      keyTimeout: 1000,\n      playState: PlayState.NotStarted\n    }\n  }\n\n  componentDidMount() {\n    // Mobile viewport sizing hack from https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\n    function resizeViewport() {\n      const vh = window.innerHeight * 0.01;\n      document.documentElement.style.setProperty('--vh', `${vh}px`);\n    }\n    window.addEventListener('resize', resizeViewport)\n    resizeViewport()\n  }\n\n  render() {\n    console.log(\"Re-rendering\")\n    const video = this.videos[this.state.index]\n\n    let next;\n    if (this.state.playState === PlayState.NotStarted) {\n      next = <div id='next-wrapper'\n        onClick={this.clickedTouchPoint}\n        style={{\n          left: `${video.playCoord!.x}%`,\n          top: `${video.playCoord!.y}%`,\n        }}>\n        <div id='next' />\n      </div>\n    } else if (this.state.playState === PlayState.Complete) {\n      next = <div id='next-wrapper'\n        onClick={this.clickedTouchPoint}\n        style={{\n          left: `${video.nextCoord!.x}%`,\n          top: `${video.nextCoord!.y}%`,\n        }}>\n        <div id='next' />\n      </div>\n    }\n\n    return (\n      <div className=\"App\" >\n        <div className=\"video-wrapper\">\n          <Cinemagraph\n            file={video.name}\n            ref={this.playerRef}\n            onComplete={this.onComplete}>\n          </Cinemagraph >\n          {next}\n        </div>\n      </div >\n    );\n  }\n\n  onKeyDown = (e: KeyboardEvent) => {\n    if (this.state.playState === PlayState.Complete) {\n      this.next()\n    } else if (this.state.playState === PlayState.NotStarted) {\n      this.playerRef.current!.playIfNotPlaying()\n      this.setState({ playState: PlayState.Playing })\n    }\n  }\n\n  onTouchStart = (e: TouchEvent) => {\n    if (this.state.playState === PlayState.Complete) {\n      this.next()\n    } else if (this.state.playState === PlayState.NotStarted) {\n      this.playerRef.current!.playIfNotPlaying()\n      this.setState({ playState: PlayState.Playing })\n    }\n  }\n\n  clickedTouchPoint = () => {\n    // TODO: Remove touch delay on mobile\n    if (this.state.playState === PlayState.Complete) {\n      this.next()\n    } else if (this.state.playState === PlayState.NotStarted) {\n      this.playerRef.current!.playIfNotPlaying()\n      this.setState({ playState: PlayState.Playing })\n    }\n  }\n\n  stopAudio = () => {\n    if (!this.playerRef.current) { return }\n    this.playerRef.current.pause()\n  }\n\n  onComplete = () => {\n    console.log(\"Is complete!\")\n    this.setState({ playState: PlayState.Complete })\n  }\n\n  next() {\n    const index = (this.state.index >= this.videos.length - 1 ? 0 : this.state.index + 1)\n    this.setState({ index, keypressIndex: 0, playState: PlayState.NotStarted })\n    setTimeout(() => { this.playerRef.current!.playIfNotPlaying() }, 0)\n  }\n}\n\nexport default App;\n","import * as React from 'react'\n\ninterface Props {\n  file: String\n  onComplete?: () => void\n}\n\nexport default class Cinemagraph extends React.Component<Props> {\n  private videoRef = React.createRef<HTMLVideoElement>()\n  private audioRef = React.createRef<HTMLAudioElement>()\n  private bgAudioRef = React.createRef<HTMLAudioElement>()\n\n  private lastPauseTime = new Date()\n\n  componentDidMount() {\n    if (!this.audioRef.current) { return }\n    console.log(\"Mounted!\")\n    this.audioRef.current.addEventListener('ended', () => {\n      if (this.props.onComplete) { this.props.onComplete() }\n    })\n  }\n\n  shouldComponentUpdate(newProps: Props) {\n    return newProps.file !== this.props.file\n  }\n\n  public playIfNotPlaying() {\n    if (!this.audioRef.current) { return }\n    if (!this.audioRef.current.paused) return\n\n    const timeDiff = new Date().getTime() - this.lastPauseTime.getTime()\n    if (timeDiff > 5000) {\n      this.audioRef.current.load()\n    }\n    this.audioRef.current.play()\n  }\n\n  public pause() {\n    if (!this.audioRef.current) { return }\n    this.lastPauseTime = new Date()\n    this.audioRef.current.pause()\n  }\n\n  render() {\n    if (this.videoRef.current) {\n      this.videoRef.current.load()\n    }\n    if (this.audioRef.current) {\n      this.audioRef.current.load()\n    }\n\n    // Todo: Treating `render` as such a state-influencing event is liable to bite me in the ass\n    if (this.bgAudioRef.current) {\n      let actx = new (window.AudioContext || (window as any).webkitAudioContext)()\n      const src = `bgaudio/${this.props.file}.mp3`\n      let audioData: any, srcNode: AudioBufferSourceNode;  // global so we can access them from handlers\n\n      const decode = (buffer: any) => {\n        console.log(\"Decoding)\")\n        actx.decodeAudioData(buffer, playLoop);\n      }\n\n      console.log(\"Context?\", actx)\n      fetch(src, { mode: \"cors\" }).then(function (resp) { return resp.arrayBuffer() }).then(decode);\n\n      // Sets up a new source node as needed as stopping will render current invalid\n      const playLoop = (abuffer: any) => {\n        console.log(\"Playing\")\n        if (!audioData) audioData = abuffer;  // create a reference for control buttons\n        srcNode = actx.createBufferSource();  // create audio source\n        srcNode.buffer = abuffer;             // use decoded buffer\n        srcNode.connect(actx.destination);    // create output\n        srcNode.loop = true;                  // takes care of perfect looping\n        srcNode.start();                      // play...\n      }\n    }\n\n    return (\n      <div>\n        <video className='cinemagraph' autoPlay loop muted playsInline ref={this.videoRef}>\n          <source src={`cinemagraphs/${this.props.file}.webm`} type=\"video/webm\" />\n          <source src={`cinemagraphs/${this.props.file}.mp4`} type=\"video/mp4\" />\n        </video>\n\n        <audio autoPlay loop ref={this.bgAudioRef}>\n          <source src={`bgaudio/${this.props.file}.mp3`} type=\"audio/mp3\" />\n        </audio>\n\n        <audio ref={this.audioRef}>\n          <source src={`dialog/${this.props.file}.mp3`} type=\"audio/mp3\" />\n        </audio>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Cinemagraph.tsx","data.ts","App.tsx","preloadMedia.ts","serviceWorker.ts","index.tsx"],"names":["Cinemagraph","videoRef","React","audioRef","bgAudioRef","ctx","window","AudioContext","webkitAudioContext","sourceNode","_this","createBufferSource","lastPauseTime","Date","_this2","this","current","addEventListener","props","onComplete","newProps","paused","getTime","load","play","pause","media","console","log","name","setState","video","src","dialog","bgaudio","hasBg","createMediaElementSource","connect","destination","react","className","autoPlay","loop","muted","playsInline","ref","PlayState","data","text","textPos","noAudio","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","playerRef","createRef","progressBarRef","cache","clickedNext","Levels","state","index","playState","Complete","length","keypressIndex","NotStarted","setTimeout","loadVideo","Playing","stopAudio","keyTimeout","loaded","loadingProgress","resizeViewport","vh","innerHeight","document","documentElement","style","setProperty","concat","onProgressUpdate","completedCount","totalCount","videoExtension","createElement","canPlayType","fetchURL","url","fetch","mode","then","f","r","blob","URL","createObjectURL","catch","e","promises","map","m","source","sources","Promise","all","results","promise","foo","percent","Math","floor","entries","forEach","preloadMedia","value","react_default","a","max","next","id","onClick","dangerouslySetInnerHTML","__html","top","Cinemagraph_Cinemagraph","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d1bcd09.chunk.js","sourcesContent":["import * as React from 'react'\nimport { CacheEntry } from '../preloadMedia';\n\ninterface Props {\n  media: CacheEntry\n  onComplete?: () => void\n}\n\nexport default class Cinemagraph extends React.Component<Props> {\n  private videoRef = React.createRef<HTMLVideoElement>()\n  private audioRef = React.createRef<HTMLAudioElement>()\n  private bgAudioRef = React.createRef<HTMLAudioElement>()\n\n  private ctx = new (window.AudioContext || (window as any).webkitAudioContext)()\n  private sourceNode = this.ctx.createBufferSource()\n\n  private lastPauseTime = new Date()\n\n  componentDidMount() {\n    if (!this.audioRef.current) { return }\n    this.audioRef.current.addEventListener('ended', () => {\n      if (this.props.onComplete) { this.props.onComplete() }\n    })\n  }\n\n  shouldComponentUpdate(newProps: Props) {\n    // lol\n    return false\n  }\n\n  public playIfNotPlaying() {\n    if (!this.audioRef.current) { return }\n    if (!this.audioRef.current.paused) return\n\n    const timeDiff = new Date().getTime() - this.lastPauseTime.getTime()\n    if (timeDiff > 5000) {\n      this.audioRef.current.load()\n    }\n    this.audioRef.current.play()\n  }\n\n  public pause() {\n    if (!this.audioRef.current) { return }\n    this.lastPauseTime = new Date()\n    this.audioRef.current.pause()\n  }\n\n  public loadVideo(media: CacheEntry) {\n    console.log(\"Loading video\", media.name)\n    this.setState({ media })\n\n    if (this.videoRef.current && media) {\n      if (media.video) {\n        this.videoRef.current.src = media.video\n        this.videoRef.current.load()\n      } else {\n        this.videoRef.current.src = \"broken\"\n      }\n    }\n\n    if (this.audioRef.current) {\n      if (media.dialog) {\n        console.log(\"Has dialog!\")\n        this.audioRef.current.src = media.dialog\n        this.audioRef.current.load()\n      } else {\n        this.audioRef.current.src = \"broken\"\n      }\n    }\n\n    if (this.bgAudioRef.current) {\n      if (media.bgaudio && media.hasBg) {\n        this.bgAudioRef.current.src = media.bgaudio\n        this.bgAudioRef.current.load()\n        if (window.AudioContext) {\n          const src = this.ctx.createMediaElementSource(this.bgAudioRef.current)\n          src.connect(this.ctx.destination)\n        }\n      } else {\n        this.bgAudioRef.current.src = \"broken\"\n      }\n    }\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <video className='cinemagraph' autoPlay loop muted playsInline ref={this.videoRef} />\n        <audio autoPlay loop ref={this.bgAudioRef} />\n        <audio autoPlay ref={this.audioRef} />\n      </div>\n    )\n  }\n}","export interface Media {\n  name: string\n  text?: string\n  textPos?: number;\n  noAudio?: boolean\n  hasBg?: boolean\n}\n\nconst data: Media[] = [\n  {\n    name: \"headphones\",\n    text: \"This experience requires sound.<br/>Headphones are recommended.\",\n    textPos: 10,\n    noAudio: true\n  },\n  {\n    name: \"bed\",\n  },\n  {\n    name: \"shower\",\n    hasBg: true\n  },\n  {\n    name: \"street\",\n  },\n  {\n    name: \"parks\",\n  },\n  {\n    name: \"plaque\",\n  },\n  {\n    name: \"garbagedump\"\n  },\n  {\n    name: \"slide\",\n  },\n  {\n    name: \"bench\",\n  },\n  {\n    name: \"fountain\",\n  },\n  {\n    name: \"drugdealers\",\n  },\n  {\n    name: \"dolores\",\n  },\n  {\n    name: \"urethra\",\n  },\n  {\n    name: \"forest\",\n  },\n  {\n    name: \"forest2\",\n  },\n  {\n    name: \"canal\",\n  },\n  {\n    name: \"slidetop\",\n  },\n  {\n    name: \"poem\",\n  }\n]\n\nexport default data","import React, { Component, SyntheticEvent } from 'react';\nimport './App.css';\nimport Cinemagraph from './components/Cinemagraph';\nimport preloadMedia, { CacheEntry } from './preloadMedia';\n\nimport Levels from './data'\n\nenum PlayState {\n  NotStarted = 0,\n  Playing = 1,\n  Complete = 2\n}\n\ninterface State {\n  index: number\n  keypressIndex: number\n  keyTimeout: number\n  playState: PlayState\n  loaded: boolean\n  loadingProgress: number\n}\n\nclass App extends Component<{}, State> {\n  private playerRef = React.createRef<Cinemagraph>()\n  private progressBarRef = React.createRef<HTMLProgressElement>()\n\n  private cache: { [name: string]: CacheEntry } = {}\n\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      index: 0,\n      keypressIndex: 0,\n      keyTimeout: 1000,\n      playState: PlayState.NotStarted,\n      loaded: false,\n      loadingProgress: 0\n    }\n  }\n\n  componentDidMount() {\n    // Mobile viewport sizing hack from https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\n    function resizeViewport() {\n      const vh = window.innerHeight * 0.01;\n      document.documentElement.style.setProperty('--vh', `${vh}px`);\n    }\n    window.addEventListener('resize', resizeViewport)\n    resizeViewport()\n\n    window.addEventListener('keypress', this.clickedNext)\n\n    preloadMedia(Levels, (percent) => {\n      if (this.progressBarRef.current) {\n        this.progressBarRef.current.value = percent\n      }\n    }).then(cache => {\n      this.cache = cache\n      this.setState({ loaded: true })\n\n      const video = Levels[0]\n      const media = this.cache[video.name]\n      setTimeout(() => {\n        this.playerRef.current!.loadVideo(media)\n      }, 100)\n    })\n  }\n\n  render() {\n    console.log(\"Re-rendering\")\n\n    if (!this.state.loaded) {\n      return (\n        <div className=\"App\" >\n          <div className=\"video-wrapper\">\n            <div>Loading!</div>\n            <progress ref={this.progressBarRef} value={this.state.loadingProgress} max=\"100\" />\n          </div>\n        </div >\n      )\n    }\n\n    const video = Levels[this.state.index]\n\n    const next = <div id='next-wrapper'\n      className={(video.noAudio || this.state.playState === PlayState.Complete) ? \"visible\" : \"hidden\"}\n    >\n      <div id='next' onClick={this.clickedNext}\n      >→</div>\n    </div >\n\n    let text;\n    if (video.text) {\n      text = <div className='text'\n        dangerouslySetInnerHTML={{ __html: video.text }}\n        style={{ top: `${video.textPos!}%` }} />\n    }\n\n    return (\n      <div className=\"App\" >\n        <div className=\"video-wrapper\">\n          <Cinemagraph\n            media={this.cache[video.name]}\n            ref={this.playerRef}\n            onComplete={this.onComplete}>\n          </Cinemagraph >\n          {text}\n          {next}\n        </div>\n      </div >\n    );\n  }\n\n  clickedNext = () => {\n    const canContinue = Levels[this.state.index].noAudio || this.state.playState === PlayState.Complete\n    if (!canContinue) return\n\n    const index = (this.state.index >= Levels.length - 1 ? 0 : this.state.index + 1)\n    this.setState({ index, keypressIndex: 0, playState: PlayState.NotStarted })\n\n    const video = Levels[index]\n    const media = this.cache[video.name]\n\n    // TODO: The 10ms delay is necessay, but shouldn't be!\n    setTimeout(() => {\n      if (!this.playerRef.current) {\n        return\n      }\n      this.playerRef.current.loadVideo(media)\n      this.setState({ playState: PlayState.Playing })\n    }, 10)\n  }\n\n  stopAudio = () => {\n    if (!this.playerRef.current) { return }\n    this.playerRef.current.pause()\n  }\n\n  onComplete = () => {\n    console.log(\"Is complete!\")\n    this.setState({ playState: PlayState.Complete })\n  }\n}\n\nexport default App;\n","import { Media } from \"./data\";\n\ninterface VideoSource {\n  bgaudio: string\n  dialog: string\n  name: string\n  video: string\n  hasBg: boolean\n}\n\nexport interface CacheEntry {\n  name: string\n  bgaudio: string | void\n  dialog: string | void\n  video: string | void\n  hasBg: boolean\n}\n\nexport default function preloadMedia(media: Media[], onProgressUpdate: (percent: number) => void): Promise<{ [name: string]: CacheEntry }> {\n  // TODO: This can be more granular than just tracking each level of the game \n  let completedCount = 0\n  let totalCount = media.length\n  function wrapPromise<T>(promise: Promise<T>): Promise<T> {\n    return promise.then(foo => {\n      completedCount += 1\n      const percent = Math.floor((completedCount / totalCount) * 100)\n      onProgressUpdate(percent)\n      return foo\n    })\n  }\n\n  const videoEl = document.createElement('video')\n  const supportsWebm = (videoEl.canPlayType('video/webm') != '')\n  const videoExtension = (supportsWebm ? \"webm\" : \"mp4\")\n\n  let sources: VideoSource[] = media.map((m) => {\n    return {\n      bgaudio: `bgaudio/${m.name}.mp3`,\n      dialog: `dialog/${m.name}.mp3`,\n      name: m.name,\n      video: `cinemagraphs/${m.name}.${videoExtension}`,\n      hasBg: m.hasBg || false\n    }\n  })\n\n  function fetchURL(url: string): Promise<string | void> {\n    return fetch(url, { mode: \"cors\" })\n      .then(f => { console.log('fetched!', f); return f })\n      .then(r => r.blob())\n      .then(URL.createObjectURL)\n      .catch(e => console.log(`Couldn't load ${url}, ${e}`))\n  }\n\n  let promises: Promise<CacheEntry>[] = sources.map(source => {\n    const sources = [source.bgaudio, source.dialog, source.video]\n    return Promise.all(sources.map(fetchURL)).then(results => {\n      return {\n        bgaudio: results[0],\n        dialog: results[1],\n        name: source.name,\n        video: results[2],\n        hasBg: source.hasBg // gets looped in in App.tsx. TODO: Move that logic here.\n      }\n    })\n  })\n\n  return Promise.all(promises.map(wrapPromise)).then(entries => {\n    let map: { [name: string]: CacheEntry } = {}\n    entries.forEach(e => {\n      map[e.name] = e\n    })\n    return map\n  })\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
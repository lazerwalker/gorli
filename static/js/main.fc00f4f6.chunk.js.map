{"version":3,"sources":["components/Cinemagraph.tsx","data.ts","App.tsx","preloadMedia.ts","serviceWorker.ts","index.tsx"],"names":["Cinemagraph","videoRef","React","audioRef","bgAudioRef","ctx","window","AudioContext","webkitAudioContext","lastPauseTime","Date","_this2","this","current","addEventListener","props","onComplete","newProps","paused","getTime","load","play","pause","media","_this3","console","log","name","setState","video","src","dialog","audioData","srcNode","bgaudio","fetch","mode","then","resp","arrayBuffer","buffer","decodeAudioData","playLoop","abuffer","createBufferSource","connect","destination","loop","start","react","className","autoPlay","muted","playsInline","ref","PlayState","data","text","textPos","noAudio","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","playerRef","createRef","progressBarRef","cache","clickedNext","index","state","Levels","length","keypressIndex","playState","NotStarted","setTimeout","loadVideo","Playing","stopAudio","Complete","keyTimeout","loaded","loadingProgress","resizeViewport","vh","innerHeight","document","documentElement","style","setProperty","concat","names","onProgressUpdate","completedCount","totalCount","videoExtension","createElement","canPlayType","fetchURL","url","r","blob","URL","createObjectURL","catch","e","promises","map","n","source","sources","Promise","all","results","promise","foo","percent","Math","floor","entries","forEach","preloadMedia","v","value","react_default","a","max","next","id","onClick","dangerouslySetInnerHTML","__html","top","Cinemagraph_Cinemagraph","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc00f4f6.chunk.js","sourcesContent":["import * as React from 'react'\nimport { CacheEntry } from '../preloadMedia';\n\ninterface Props {\n  media: CacheEntry\n  onComplete?: () => void\n}\n\nexport default class Cinemagraph extends React.Component<Props> {\n  private videoRef = React.createRef<HTMLVideoElement>()\n  private audioRef = React.createRef<HTMLAudioElement>()\n  private bgAudioRef = React.createRef<HTMLAudioElement>()\n\n  private ctx = new (window.AudioContext || (window as any).webkitAudioContext)()\n\n  private lastPauseTime = new Date()\n\n  componentDidMount() {\n    if (!this.audioRef.current) { return }\n    this.audioRef.current.addEventListener('ended', () => {\n      if (this.props.onComplete) { this.props.onComplete() }\n    })\n  }\n\n  shouldComponentUpdate(newProps: Props) {\n    // lol\n    return false\n  }\n\n  public playIfNotPlaying() {\n    if (!this.audioRef.current) { return }\n    if (!this.audioRef.current.paused) return\n\n    const timeDiff = new Date().getTime() - this.lastPauseTime.getTime()\n    if (timeDiff > 5000) {\n      this.audioRef.current.load()\n    }\n    this.audioRef.current.play()\n  }\n\n  public pause() {\n    if (!this.audioRef.current) { return }\n    this.lastPauseTime = new Date()\n    this.audioRef.current.pause()\n  }\n\n  public loadVideo(media: CacheEntry) {\n    console.log(\"Loading video\", media.name)\n    this.setState({ media })\n\n    if (this.videoRef.current && media) {\n      if (media.video) {\n        this.videoRef.current.src = media.video\n        this.videoRef.current.load()\n      } else {\n        this.videoRef.current.src = \"broken\"\n      }\n    }\n\n    if (this.audioRef.current) {\n      if (media.dialog) {\n        console.log(\"Has dialog!\")\n        this.audioRef.current.src = media.dialog\n        this.audioRef.current.load()\n      } else {\n        this.audioRef.current.src = \"broken\"\n      }\n    }\n\n    // Background audio\n    const src = media.bgaudio\n    let audioData: any, srcNode: AudioBufferSourceNode;  // global so we can access them from handlers\n\n    const decode = (buffer: any) => {\n      this.ctx.decodeAudioData(buffer, playLoop)\n    }\n\n    if (src) {\n      fetch(src, { mode: \"cors\" }).then(function (resp) { return resp.arrayBuffer() }).then(decode);\n    }\n\n    // Sets up a new source node as needed as stopping will render current invalid\n    const playLoop = (abuffer: any) => {\n      if (!audioData) audioData = abuffer;  // create a reference for control buttons\n      srcNode = this.ctx.createBufferSource();  // create audio source\n      srcNode.buffer = abuffer;             // use decoded buffer\n      srcNode.connect(this.ctx.destination);    // create output\n      srcNode.loop = true;                  // takes care of perfect looping\n      srcNode.start();                      // play...\n    }\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <video className='cinemagraph' autoPlay loop muted playsInline ref={this.videoRef} />\n        <audio autoPlay loop ref={this.bgAudioRef} />\n        <audio autoPlay ref={this.audioRef} />\n      </div>\n    )\n  }\n}","export interface Media {\n  name: string\n  text?: string\n  textPos?: number;\n  noAudio?: boolean\n}\n\nconst data: Media[] = [\n  {\n    name: \"headphones\",\n    text: \"This experience requires sound.<br/>Headphones are recommended.\",\n    textPos: 10,\n    noAudio: true\n  },\n  {\n    name: \"bed\",\n  },\n  {\n    name: \"shower\",\n  },\n  {\n    name: \"street\",\n  },\n  {\n    name: \"parks\",\n  },\n  {\n    name: \"plaque\",\n  },\n  {\n    name: \"garbagedump\"\n  },\n  {\n    name: \"slide\",\n  },\n  {\n    name: \"bench\",\n  },\n  {\n    name: \"fountain\",\n  },\n  {\n    name: \"drugdealers\",\n  },\n  {\n    name: \"dolores\",\n  },\n  {\n    name: \"urethra\",\n  },\n  {\n    name: \"forest\",\n  },\n  {\n    name: \"forest2\",\n  },\n  {\n    name: \"canal\",\n  },\n  {\n    name: \"slidetop\",\n  },\n  {\n    name: \"poem\",\n  }\n]\n\nexport default data","import React, { Component, SyntheticEvent } from 'react';\nimport './App.css';\nimport Cinemagraph from './components/Cinemagraph';\nimport preloadMedia, { CacheEntry } from './preloadMedia';\n\nimport Levels from './data'\n\nenum PlayState {\n  NotStarted = 0,\n  Playing = 1,\n  Complete = 2\n}\n\ninterface State {\n  index: number\n  keypressIndex: number\n  keyTimeout: number\n  playState: PlayState\n  loaded: boolean\n  loadingProgress: number\n}\n\nclass App extends Component<{}, State> {\n  private playerRef = React.createRef<Cinemagraph>()\n  private progressBarRef = React.createRef<HTMLProgressElement>()\n\n  private cache: { [name: string]: CacheEntry } = {}\n\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      index: 0,\n      keypressIndex: 0,\n      keyTimeout: 1000,\n      playState: PlayState.NotStarted,\n      loaded: false,\n      loadingProgress: 0\n    }\n  }\n\n  componentDidMount() {\n    // Mobile viewport sizing hack from https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\n    function resizeViewport() {\n      const vh = window.innerHeight * 0.01;\n      document.documentElement.style.setProperty('--vh', `${vh}px`);\n    }\n    window.addEventListener('resize', resizeViewport)\n    resizeViewport()\n\n    preloadMedia(Levels.map(v => v.name), (percent) => {\n      if (this.progressBarRef.current) {\n        this.progressBarRef.current.value = percent\n      }\n    }).then(cache => {\n      this.cache = cache\n      this.setState({ loaded: true })\n\n      const video = Levels[0]\n      const media = this.cache[video.name]\n      setTimeout(() => {\n        this.playerRef.current!.loadVideo(media)\n      }, 100)\n    })\n  }\n\n  render() {\n    console.log(\"Re-rendering\")\n\n    if (!this.state.loaded) {\n      return (\n        <div className=\"App\" >\n          <div className=\"video-wrapper\">\n            <div>Loading!</div>\n            <progress ref={this.progressBarRef} value={this.state.loadingProgress} max=\"100\" />\n          </div>\n        </div>\n      )\n    }\n\n    const video = Levels[this.state.index]\n\n    const next = <div id='next-wrapper'\n      onClick={this.clickedNext}\n      className={(video.noAudio || this.state.playState === PlayState.Complete) ? \"visible\" : \"hidden\"}\n    >\n      <div id='next'>→</div>\n    </div >\n\n    let text;\n    if (video.text) {\n      text = <div className='text'\n        dangerouslySetInnerHTML={{ __html: video.text }}\n        style={{ top: `${video.textPos!}%` }} />\n    }\n\n    return (\n      <div className=\"App\" >\n        <div className=\"video-wrapper\">\n          <Cinemagraph\n            media={this.cache[video.name]}\n            ref={this.playerRef}\n            onComplete={this.onComplete}>\n          </Cinemagraph >\n          {text}\n          {next}\n        </div>\n      </div >\n    );\n  }\n\n  clickedNext = () => {\n    const index = (this.state.index >= Levels.length - 1 ? 0 : this.state.index + 1)\n    this.setState({ index, keypressIndex: 0, playState: PlayState.NotStarted })\n\n    const video = Levels[index]\n    const media = this.cache[video.name]\n\n    // TODO: The 10ms delay is necessay, but shouldn't be!\n    setTimeout(() => {\n      if (!this.playerRef.current) {\n        return\n      }\n      this.playerRef.current.loadVideo(media)\n      this.setState({ playState: PlayState.Playing })\n    }, 10)\n  }\n\n  stopAudio = () => {\n    if (!this.playerRef.current) { return }\n    this.playerRef.current.pause()\n  }\n\n  onComplete = () => {\n    console.log(\"Is complete!\")\n    this.setState({ playState: PlayState.Complete })\n  }\n}\n\nexport default App;\n","interface VideoSource {\n  bgaudio: string\n  dialog: string\n  name: string\n  video: string\n}\n\nexport interface CacheEntry {\n  name: string\n  bgaudio: string | void\n  dialog: string | void\n  video: string | void\n}\n\nexport default function preloadMedia(names: string[], onProgressUpdate: (percent: number) => void): Promise<{ [name: string]: CacheEntry }> {\n  // TODO: This can be more granular than just tracking each level of the game \n  let completedCount = 0\n  let totalCount = names.length\n  function wrapPromise<T>(promise: Promise<T>): Promise<T> {\n    return promise.then(foo => {\n      completedCount += 1\n      const percent = Math.floor((completedCount / totalCount) * 100)\n      onProgressUpdate(percent)\n      return foo\n    })\n  }\n\n  const videoEl = document.createElement('video')\n  const supportsWebm = (videoEl.canPlayType('video/webm') != '')\n  const videoExtension = (supportsWebm ? \"webm\" : \"mp4\")\n\n  let sources: VideoSource[] = names.map((n) => {\n    return {\n      bgaudio: `bgaudio/${n}.mp3`,\n      dialog: `dialog/${n}.mp3`,\n      name: n,\n      video: `cinemagraphs/${n}.${videoExtension}`\n    }\n  })\n\n  function fetchURL(url: string): Promise<string | void> {\n    return fetch(url, { mode: \"cors\" })\n      .then(r => r.blob())\n      .then(URL.createObjectURL)\n      .catch(e => console.log(`Couldn't load ${url}, ${e}`))\n  }\n\n  let promises: Promise<CacheEntry>[] = sources.map(source => {\n    const sources = [source.bgaudio, source.dialog, source.video]\n    return Promise.all(sources.map(fetchURL)).then(results => {\n      return {\n        bgaudio: results[0],\n        dialog: results[1],\n        name: source.name,\n        video: results[2]\n      }\n    })\n  })\n\n  return Promise.all(promises.map(wrapPromise)).then(entries => {\n    let map: { [name: string]: CacheEntry } = {}\n    entries.forEach(e => {\n      map[e.name] = e\n    })\n    return map\n  })\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}